Carl Eddie Hewitt (; 1944 – 7 December 2022) was an American computer scientist who designed the Planner programming language for automated planning and the actor model of concurrent computation, which have been influential in the development of logic, functional and object-oriented programming. Planner was the first programming language based on procedural plans invoked using pattern-directed invocation from assertions and goals. The actor model influenced the development of the Scheme programming language, the π-calculus, and served as an inspiration for several other programming languages.


== Education and career ==
Hewitt obtained his PhD in mathematics at MIT in 1971, under the supervision of Seymour Papert, Marvin Minsky, and Mike Paterson. He began his employment at MIT that year, and retired from the faculty of the MIT Department of Electrical Engineering and Computer Science during the 1999–2000 school year. He became emeritus in the  department in 2000. Among the doctoral students that Hewitt supervised during his time at MIT are Gul Agha, Henry Baker, William Clinger, Irene Greif,  and Akinori Yonezawa.
From September 1989 to August 1990, Hewitt was the IBM Chair Visiting Professor in the Department of Computer Science at Keio University in Japan. He has also been a Visiting Professor at Stanford University.


== Research ==
Hewitt was best known for his work on the actor model of computation. For the last decade, his work had been in "inconsistency robustness", which aims to provide practical rigorous foundations for systems dealing with pervasively inconsistent information. This work grew out of his doctoral dissertation focused on the procedural (as opposed to logical) embedding of knowledge, which was embodied in the Planner programming language.
His publications also include contributions in the areas of open information systems, organizational and multi-agent systems, logic programming, concurrent programming, paraconsistent logic and cloud computing.


=== Planner ===

The Planner language was developed during the late 1960s as part of Hewitt's doctoral research in MIT's Artificial Intelligence Laboratory. Hewitt's work on Planner introduced the notion of the "procedural embedding of knowledge", which was an alternative to the logical approach to knowledge encoding for artificial intelligence pioneered by John McCarthy. Planner has been described as "extremely ambitious". A subset of Planner called Micro-Planner was implemented at MIT by Gerry Sussman, Drew McDermott, Eugene Charniak and Terry Winograd and was used in Winograd's SHRDLU program, Charniak's natural language story understanding work, and L. Thorne McCarty's work on legal reasoning. Planner was almost completely implemented in Popler by Julian Davies at Edinburgh. Planner also influenced the later development of other AI research languages such as Muddle and Conniver, as well as the Smalltalk object-oriented programming language.
Hewitt's own work on Planner continued with Muddle (later called MDL), which was developed in the early 1970s by Sussman, Hewitt, Chris Reeve, and David Cressey as a stepping-stone towards a full implementation of Planner. Muddle was implemented as an extended version of Lisp, and introduced several features that were later adopted by Conniver, Lisp Machine Lisp, and Common Lisp. However, in late 1972 Hewitt abruptly halted his development of the Planner design in his thesis, when he and his graduate students invented the actor model of computation.


=== Actor model ===

Hewitt's work on the actor model of computation spanned over 30 years, beginning with the introduction of the model in a 1973 paper authored by Hewitt, Peter Bishop, and Richard Steiger, and including new results on actor model semantics published as recently as 2006. Much of this work was carried out in collaboration with students in Hewitt's Message Passing Semantics Group at MIT's Artificial Intelligence Lab.
Sussman and Steele developed the Scheme programming language in an effort to gain a better understanding of the actor model. They discovered that their operator to create an actor, ALPHA, and their operator to create a function, LAMBDA, were identical, so they only kept LAMBDA for both. A number of other programming languages were developed to specifically implement the actor model, such as  ACT-1, SALSA, Caltrop, E and ActorScript. The actor model also influenced the development of the π-calculus. (See actor model and process calculi history.)


== Selected works ==
Carl Hewitt (1969). PLANNER: A Language for Proving Theorems in Robots IJCAI'69.
Carl Hewitt, Peter Bishop and Richard Steiger (1973). A Universal Modular Actor Formalism for Artificial Intelligence  IJCAI'73.
Carl Hewitt and Henry Baker (1977a). Laws for Communicating Parallel Processes IFIP'77.
Carl Hewitt and Henry Baker (1977b). Actors and Continuous Functionals  Proceeding of IFIP Working Conference on Formal Description of Programming Concepts. August 1–5, 1977.
William Kornfeld and Carl Hewitt (1981). The Scientific Community Metaphor  IEEE Transactions on Systems, Man, and Cybernetics. January 1981.
Henry Lieberman and Carl E. Hewitt (1983). A Real-Time Garbage Collector Based on the Lifetimes of Objects Communications of the ACM, 26(6).
Carl Hewitt (1985). The Challenge of Open Systems Byte Magazine. April 1985. (Reprinted in The foundation of artificial intelligence—a sourcebook Cambridge University Press. 1990


== See also ==
Scientific community metaphor


== References ==


== External links ==
Carl Hewitt at DBLP Bibliography Server 
Carl Eddie Hewitt at the Mathematics Genealogy Project 
Hewitt's official blog